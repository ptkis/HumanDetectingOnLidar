import java.util.ArrayList;
import java.util.StringTokenizer;

import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_node;
import libsvm.svm_parameter;
import libsvm.svm_problem;

public class Features {
	public static String cmd="-t 2 -c 100";
	public Data data;
	public double angle;
	public double[] LOS;// Length Of Segment
	public double[] ROM2M;// Ratio Of Major To Minor axis of the ellipse
	public double[] MCCOS;// Mean Curvature Characteristic Of Segment
	public double[] ROD2N;// Ratio Of the Distance between laser source to the
							// centre of segmentation To Numbers of points

	public Features(Data data) {
		if (data.isFlaged() == false) {
			System.err.println("The data has not been cluster!");
		}
		this.data = data;
		angle = (270.0 / 360.0 * 2 * Math.PI) / (data.getDepths().size());
		LOS = new double[data.depths.get(data.depths.size() - 1).flag ];
		ROM2M = new double[data.depths.get(data.depths.size() - 1).flag ];
		MCCOS = new double[data.depths.get(data.depths.size() - 1).flag ];
		ROD2N = new double[data.depths.get(data.depths.size() - 1).flag ];
	}

	public Features(String dataString) {
		String[] tmp = dataString.split(";");
		ArrayList<Cell> list = new ArrayList<Cell>();
		for (int i = 0; i < tmp.length; i++) {
			list.add(new Cell(Integer.parseInt(tmp[i]), 0));
		}
		Data tmpData = new Data();

		tmpData.setDepths(list);
		tmpData.accuracy = 243;
		tmpData.powerOfMaxGroup = 83;
		tmpData.powerOfVariance = 17;
		tmpData.divisor = 177;
		tmpData.setFlaged(true);
		tmpData.cluster();
		this.data = tmpData;
		angle = (270.0 / 360.0 * 2 * Math.PI) / (data.getDepths().size());
		LOS = new double[data.depths.get(data.depths.size() - 1).flag ];
		ROM2M = new double[data.depths.get(data.depths.size() - 1).flag ];
		MCCOS = new double[data.depths.get(data.depths.size() - 1).flag ];
		ROD2N = new double[data.depths.get(data.depths.size() - 1).flag ];
	}

	public Features() {
		super();
	}

	public double[][] getXY(int[] depthsData) {
		double[][] xy = new double[depthsData.length][2];
		for (int i = 0; i < depthsData.length; i++) {
			xy[i][0] = (depthsData[i]) * Math.cos(-angle * i - Math.PI / 4 * 3 + Math.PI);
			xy[i][1] = (depthsData[i]) * Math.sin(-angle * i - Math.PI / 4 * 3 + Math.PI);
		}
		return xy;
	}

	public int[] getDepthsDataInArray(int flag) {
		int loc1 = -1, loc2 = -1;
		for (int i = 0; i < data.depths.size(); i++) {
			if (i == 1071) {
				loc1 = loc1 + 1 - 1;
			}
			if (data.depths.get(i).flag == flag && loc1 == -1) {
				loc1 = i;
			} else if (data.depths.get(i).flag == flag + 1) {
				loc2 = i - 1;
				break;
			} else if (i == data.depths.size() - 1) {
				loc2 = data.depths.size() - 1;
			}
		}
		int[] depthsData = new int[loc2 - loc1 + 1];
		for (int i = 0; i < depthsData.length; i++) {
			depthsData[i] = (int) data.depths.get(loc1 + i).depth;
		}
		return depthsData;
	}

	public double getLOS(double[][] xyData) {
		double localLOS = 0;
		double x1 = xyData[0][0];
		double y1 = xyData[0][1];
		double x2 = xyData[xyData.length-1][0];
		double y2 = xyData[xyData.length-1][1];
		localLOS = Math.sqrt(((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)));
		return localLOS;
	}

	// continuing
	public double getROM2M(double[][] xyData) {
		double localROM2M = 0;
		return localROM2M;
	}

	public double getMCCOS(double[][] xyData) {
		int times=xyData.length-2;
		double x1=0,y1=0,x2=0,y2=0,x3=0,y3=0;
		double A=0,d1=0,d2=0,d3=0;
		double localMCCOS = 0;
		int conTime=0;
		if(times>0){
			for(int i=0;i<times;i++){
				x1=xyData[i][0];
				y1=xyData[i][1];
				x2=xyData[i+1][0];
				y2=xyData[i+1][1];
				x3=xyData[i+2][0];
				y3=xyData[i+2][1];
				A=Math.abs((x1*y2+y1*x3+x2*y3)-(x1*y3+y2*x3+y1*x2))/2;
				d1=Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
				d2=Math.sqrt((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3));
				d3=Math.sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1));
				if(d1==0||d2==0||d3==0){
					conTime++;
					System.out.println("continue!");
					continue;
				}
				//System.out.println(d1+","+d2+","+d3+","+A);
				localMCCOS+=4*A/(d1*d2*d3);
			}
		}
		if(times<=conTime)return 0;
		localMCCOS=localMCCOS/(times-conTime);
		return localMCCOS;
	}

	// continuing
	public double getROD2N(double[][] xyData) {
		double localROD2N = 0;
		return localROD2N;
	}

	public double[][] getAllFeatures() {
		for(int i=0;i<LOS.length;i++){
			LOS[i]=getLOS(getXY(getDepthsDataInArray(i+1)));
			MCCOS[i]=getMCCOS(getXY(getDepthsDataInArray(i+1)));
		}
		return new double[][]{LOS,MCCOS};
	}
	public svm_model getModel(String args,double[][] features,double lables[]) {
		// guard
		svm_model model = new svm_model();
		if(features[0].length!=lables.length)return null;
		
		svm_parameter param = new svm_parameter();

		// default values
		param.svm_type = svm_parameter.C_SVC;
		param.kernel_type = svm_parameter.RBF;
		param.degree = 3;
		param.gamma = 0;
		param.coef0 = 0;
		param.nu = 0.5;
		param.cache_size = 40;
		param.C = 1;
		param.eps = 1e-3;
		param.p = 0.1;
		param.shrinking = 1;
		param.probability = 0;
		param.nr_weight = 0;
		param.weight_label = new int[0];
		param.weight = new double[0];

		// parse options
		StringTokenizer st = new StringTokenizer(args);
		String[] argv = new String[st.countTokens()];
		for (int i = 0; i < argv.length; i++)
			argv[i] = st.nextToken();

		for (int i = 0; i < argv.length; i++) {
			if (argv[i].charAt(0) != '-')
				break;
			if (++i >= argv.length) {
				System.err.print("unknown option\n");
				break;
			}
			switch (argv[i - 1].charAt(1)) {
			case 's':
				param.svm_type = Integer.parseInt(argv[i]);
				break;
			case 't':
				param.kernel_type = Integer.parseInt(argv[i]);
				break;
			case 'd':
				param.degree = Integer.parseInt(argv[i]);
				break;
			case 'g':
				param.gamma = Integer.parseInt(argv[i]);
				break;
			case 'r':
				param.coef0 = Integer.parseInt(argv[i]);
				break;
			case 'n':
				param.nu = Integer.parseInt(argv[i]);
				break;
			case 'm':
				param.cache_size = Integer.parseInt(argv[i]);
				break;
			case 'c':
				param.C = Integer.parseInt(argv[i]);
				break;
			case 'e':
				param.eps = Integer.parseInt(argv[i]);
				break;
			case 'p':
				param.p = Integer.parseInt(argv[i]);
				break;
			case 'h':
				param.shrinking = Integer.parseInt(argv[i]);
				break;
			case 'b':
				param.probability = Integer.parseInt(argv[i]);
				break;
			case 'w':
				++param.nr_weight; {
				int[] old = param.weight_label;
				param.weight_label = new int[param.nr_weight];
				System.arraycopy(old, 0, param.weight_label, 0, param.nr_weight - 1);
			}

			{
				double[] old = param.weight;
				param.weight = new double[param.nr_weight];
				System.arraycopy(old, 0, param.weight, 0, param.nr_weight - 1);
			}

				param.weight_label[param.nr_weight - 1] = Integer.parseInt(argv[i - 1].substring(2));
				param.weight[param.nr_weight - 1] = Integer.parseInt(argv[i]);
				break;
			default:
				System.err.print("unknown option\n");
			}
		}

		// build problem
		svm_problem prob = new svm_problem();
		prob.l = lables.length;
		prob.y = lables;

		if (param.kernel_type == svm_parameter.PRECOMPUTED) {
		} else if (param.svm_type == svm_parameter.EPSILON_SVR || param.svm_type == svm_parameter.NU_SVR) {
			if (param.gamma == 0)
				param.gamma = 1;
			prob.x = new svm_node[prob.l][1];
			for (int i = 0; i < prob.l; i++) {
				prob.x[i][0] = new svm_node();
				prob.x[i][0].index = 1;
				prob.x[i][0].value = features[0][i];
			}

			// build model & classify
			model = svm.svm_train(prob, param);
			


			
		} else {
			if (param.gamma == 0)
				param.gamma = 0.5;
			prob.x = new svm_node[prob.l][2];
			for (int i = 0; i < prob.l; i++) {
				for(int j=0;j<features.length;j++){
					prob.x[i][j] = new svm_node();
					prob.x[i][j].index = j+1;
					prob.x[i][j].value = features[j][i];
				}
			}

			// build model & classify
			model = svm.svm_train(prob, param);



		}
		return model;
	}
	
	public static double[] getLables(int length,int[] a){
		double[] lables = new double[length];
		for(int i=0;i<a.length;i++){
			lables[a[i]]=1.0;
		}
		return lables;
	}
	public static double[][] mixFeatures(double[][][] differentFeatures){
		double[][] features = new double[differentFeatures.length*differentFeatures[0].length][differentFeatures[0][0].length];
		for(int i=0;i<differentFeatures.length;i++){
			for(int j =0;j<differentFeatures[0].length;j++){
				for(int k=0;k<differentFeatures[0][0].length;k++){
					features[i*differentFeatures[0].length+j][k]=differentFeatures[i][j][k];
				}
			}
		}
		return features;
		
	}
	public static double[] mixLables(double[][] differentLables){
		double[] lables = new double[differentLables.length*differentLables[0].length];
		for(int i=0;i<differentLables.length;i++){
			for(int j=0;j<differentLables[0].length;j++){
				lables[i*differentLables[0].length+j]=differentLables[i][j];
			}
		}
		return lables;
	}
	public static void main(String[] args) {
		// frame3
		String a = "8717;8719;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;11068;11031;11020;10942;10830;10771;10745;10716;10700;10700;10711;10740;10769;10812;10835;10869;10893;10907;10918;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;12847;12815;12815;12771;12721;12693;12693;12693;12663;12462;12462;12475;12475;12413;12378;12288;12247;12192;12104;12040;12027;12027;12175;12206;12229;60000;60000;60000;60000;60000;60000;17702;17667;17631;17631;17663;17749;17841;17950;18042;18143;18220;18324;18447;18568;18632;18632;18547;18483;18417;18352;18312;18312;60000;60000;18395;18381;18358;18358;18269;18219;18156;18099;18056;17988;17934;17934;17898;17346;17339;17293;17250;17215;17137;17119;17061;17031;16990;16950;16894;16855;16804;16784;16735;16735;60000;60000;16931;16909;16881;16868;16814;16775;16761;16723;16699;16647;16595;16577;16538;9405;9386;9386;9362;9359;9349;9349;9330;9296;9290;9275;9268;9243;9228;9218;9191;9175;9165;9147;9146;9117;9110;9105;9089;9061;9055;9041;9033;9022;9017;8999;8999;9029;9194;9333;9472;9610;9768;9957;10118;10280;10454;10649;10839;11054;11267;11484;11673;11949;12228;12445;12703;13004;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;8638;8630;8630;8632;8632;8632;8622;8626;8625;8626;8630;8630;8636;8641;8641;8642;8644;8644;8642;8642;8651;8651;8651;8650;8652;8665;10012;10012;9973;9945;9925;9925;9936;9954;9960;9995;10117;17707;17721;17730;17736;17741;17780;17783;17783;9020;9020;9042;9049;9060;9067;9067;9049;8922;8836;8836;8853;8869;8872;8892;8892;8907;8919;8930;8934;8949;8964;8969;8984;8991;9002;9007;9039;9052;9067;9072;9080;9095;9119;9124;9131;9139;9169;9184;9192;9214;9218;9229;9248;9268;9290;9298;9329;9332;9359;9370;9385;9401;9431;9444;9458;9474;9503;9513;9530;9557;9574;9605;9609;9631;9658;9674;9699;9709;9745;9774;9785;9810;9835;9863;9883;9901;9937;9949;9972;10008;10032;10050;10090;10119;10124;10177;10193;10220;10251;10279;10321;10350;10373;10401;10423;10460;10506;10531;10564;10591;10644;10648;10691;10720;10764;10797;10832;10882;10914;10951;10980;11022;11044;11099;11128;11171;11210;11261;11285;11358;11382;11429;11458;11498;11555;11599;11656;11683;11727;11794;11858;11893;11945;11973;12054;12106;12157;12196;12279;12328;12373;12413;12498;12535;12609;12653;12718;12770;12835;12909;12976;12976;9437;9410;9359;9358;9308;9267;9236;9215;9178;9141;9109;9084;9049;9010;8987;8961;8925;8895;8870;8853;8806;8781;8746;8720;8689;8676;8643;8622;8592;8572;8545;8512;8507;8461;8448;8414;8412;8389;8352;8329;8315;8282;8272;8240;8229;8210;8176;8146;8144;8119;8096;8091;8052;8048;8028;8002;7984;7970;7953;7937;7924;7896;7892;7861;7842;7835;7814;7813;7802;7774;7765;7749;7726;7713;7699;7682;7681;7657;7655;7633;7617;7612;7605;7581;7571;7560;7553;7545;7519;7506;7491;7469;7433;7433;7416;7409;7392;7392;7494;7600;7644;9196;9196;9196;10677;10677;10655;10635;10617;10617;10616;10612;10612;60000;60000;12719;12703;12703;12693;12680;12655;12640;12640;12599;12584;12578;12537;12535;12510;12467;12467;12464;12411;12407;12385;12369;12346;12346;12319;12277;12277;12270;12268;12260;12255;12216;12216;12218;12218;12190;12176;12188;12176;12159;12140;12140;12155;60000;60000;60000;12172;12172;16547;16561;16557;16557;16557;16570;16570;16555;16555;16565;16565;16569;16566;16571;16566;16573;16574;16585;16585;16592;16590;16592;16611;16611;16611;16615;16624;16624;7282;7155;7086;7086;7101;7103;7113;7117;7141;7166;7172;7178;7183;7197;7197;7204;7206;7209;7218;7225;7233;7244;7247;7254;7262;7263;7263;7233;7214;7214;7307;7309;7323;7324;7324;7292;7215;7033;6844;6712;6614;6512;6443;6343;6258;6170;6077;5993;5908;5821;5766;5680;5606;5538;5470;5413;5333;5274;5220;5162;5103;5054;5002;4934;4886;4832;4785;4739;4685;4637;4598;4553;4516;4477;4426;4388;4348;4306;4269;4230;4187;4156;4117;4095;4053;4022;3980;3946;3914;3886;3861;3823;3800;3771;3748;3712;3681;3660;3628;3595;3571;3558;3524;3495;3468;3456;3428;3408;3381;3357;3330;3318;3289;3273;3254;3236;3211;3196;3174;3157;3149;3149;3156;3157;3173;3196;3198;3215;3229;3235;3246;3251;3257;3266;3299;3311;3320;3327;3345;3357;3375;3375;3386;3393;3414;3447;3447;3447;3466;3472;3483;3517;3529;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;2560;2560;2557;2552;2552;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;1610;1591;1591;1581;1572;1569;1563;1563;1559;1568;1568;1568;1569;1572;1578;1580;1606;1675;1685;1690;1686;1686;1686;1679;1677;1672;1664;1577;1549;1549;1549;1548;1547;1544;1543;1540;1539;1538;1532;1530;1529;1525;1525;1527;1527;1524;1522;1522;1522;1523;1523;1519;1519;1517;1517;1515;1515;1515;1511;1510;1509;1506;1505;1496;1489;1471;1460;1053;964;897;844;823;807;787;781;775;765;765;763;761;761;762;763;763;763;763;763;765;766;765;766;766;768;768;772;765;766;766;771;773;776;776;771;771;771;771;771;776;777;776;762;760;760;770;771;771;765;765;766;767;767;758;758;754;754;748;748;748;748;742;742;742;741;740;735;735;735;711;694;694;694;692;692;692;684;684;685;688;688;688;688;689;690;691;691;691;695;695;695;696;701;731;743;763;2263;2263;2259;2255;2259;2266;2266;2269;2279;2279";
		String b="8722;8722;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;11119;11075;11000;10929;10844;10762;10747;10727;10679;10679;10712;10766;10794;10814;10840;10871;10900;10916;10920;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;12884;12883;12815;12768;12696;12683;12683;12683;12653;12479;12479;12479;12467;12406;12360;12292;12259;12187;12118;12052;12021;12021;12184;12193;12216;17127;60000;60000;60000;60000;17746;17704;17676;17640;17640;17640;17768;17861;17944;18030;18134;18228;18339;18450;18581;18622;18622;18537;18471;18426;18363;18328;18328;60000;60000;18376;18374;18367;18332;18283;18206;18171;18113;18033;17995;17934;17934;17841;17358;17342;17306;17258;17192;17151;17095;17077;17030;16995;16927;16902;16846;16835;16780;16735;16735;60000;60000;16902;16886;16878;16878;16848;16795;16747;16693;16677;16661;7809;7794;7794;7800;7800;7791;7785;7774;7753;7737;7737;7738;7787;9265;9265;9250;9231;9209;9197;9183;9169;9151;9137;9130;9110;9101;9081;9072;9062;9049;9043;9028;9010;8994;8994;9038;9206;9303;9478;9634;9759;9920;10136;10252;10446;10663;10857;11056;11270;11487;60000;60000;60000;7557;7532;7532;7557;7592;7603;7631;7756;7826;7830;7830;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;8637;8637;8637;8634;8625;8625;8633;8633;8630;7914;7812;7772;7730;7710;7701;7654;7615;7615;7643;7661;7706;8642;8642;8642;8642;8680;17607;17607;17619;17628;17637;17648;17649;17662;17663;17700;17708;17713;17728;17732;17746;17747;17755;17767;17767;9025;9025;9042;9046;9046;9052;9052;9052;8909;8844;8844;8850;8868;8880;8880;8895;8905;8911;8925;8936;8950;8962;8966;8981;8996;9006;9013;9030;9045;9059;9067;9085;9090;9107;9122;9141;9148;9159;9180;9197;9210;9214;9236;9250;9270;9281;9303;9316;9340;9352;9373;9392;9406;9420;9442;9470;9470;9500;9526;9529;9553;9564;9607;9619;9632;9652;9693;9708;9720;9752;9764;9783;9806;9836;9854;9889;9905;9918;9965;9979;9996;10054;10067;10089;10117;10142;10169;10198;10225;10259;10279;10304;10339;10365;10403;10435;10462;10506;10528;10552;10590;10622;10666;10690;10724;10771;10789;10825;10875;10898;10941;10978;11012;11051;11089;11132;11174;11203;11248;11284;11347;11369;11437;11459;11512;11551;11588;11652;11689;11753;11775;11833;11895;11947;12002;12052;12096;12148;12208;12261;12318;12356;12419;12476;12527;12586;12654;12716;12776;12831;12876;12962;12962;9445;9402;9360;9357;9288;9266;9239;9202;9154;9146;9114;9085;9042;9019;8976;8955;8926;8891;8875;8842;8816;8777;8757;8737;8701;8666;8641;8623;8599;8564;8548;8517;8486;8453;8441;8427;8398;8381;8372;8331;8311;8302;8271;8251;8221;8199;8178;8159;8134;8128;8110;8090;8072;8036;8032;8012;7999;7984;7960;7931;7921;7906;7889;7857;7848;7841;7818;7812;7798;7774;7773;7749;7732;7712;7709;7699;7679;7658;7645;7644;7623;7605;7596;7584;7582;7558;7550;7538;7516;7511;7502;7468;7429;7427;7412;7405;7403;7403;7494;7599;7629;9192;9192;9192;10667;10667;10651;10636;10634;10601;10601;10601;10610;60000;60000;12746;12726;12718;12714;12666;12666;12655;12611;12603;12596;12577;12555;12529;12506;12499;12474;12433;12420;12420;12408;12377;12377;12349;12321;12320;12320;12301;12263;12258;12243;12225;12240;12216;12199;12199;12196;12168;12168;12163;12166;12166;12207;60000;60000;12150;12117;12117;16565;16565;16552;16552;16556;16557;16557;16557;16555;16549;16549;16566;16566;16567;16567;16576;16576;16579;16579;16589;16598;16599;16600;16603;16612;16618;16620;16620;7284;7151;7098;7098;7099;7102;7106;7109;7137;7162;7172;7183;7189;7189;7192;7204;7208;7210;7225;7226;7233;7233;7236;7239;7260;7268;7268;7241;7212;7212;7304;7319;7327;7327;7321;7298;7209;7053;6834;6720;6613;6514;6424;6351;6256;6168;6079;5997;5916;5834;5765;5685;5614;5547;5469;5404;5341;5272;5225;5158;5098;5047;4997;4940;4886;4836;4789;4730;4688;4640;4597;4556;4519;4467;4432;4387;4347;4312;4264;4235;4196;4157;4116;4087;4052;4027;3987;3954;3916;3890;3850;3822;3803;3765;3739;3708;3683;3645;3627;3602;3576;3555;3520;3498;3473;3449;3427;3402;3384;3364;3340;3311;3292;3269;3256;3235;3211;3186;3169;3159;3150;3150;3165;3166;3178;3184;3198;3205;3222;3229;3250;3254;3260;3273;3287;3310;3319;3339;3342;3358;3373;3373;3375;3386;3426;3429;3439;3448;3449;3457;3489;3489;3511;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;2568;2557;2557;2542;2542;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;60000;1608;1602;1588;1579;1570;1570;1566;1570;1562;1563;1563;1566;1566;1569;1573;1590;1602;1677;1691;1691;1685;1684;1683;1681;1679;1677;1665;1584;1551;1548;1543;1542;1540;1534;1534;1539;1539;1532;1531;1532;1532;1532;1532;1531;1531;1525;1522;1525;1522;1522;1520;1517;1515;1516;1516;1516;1516;1516;1512;1508;1508;1510;1510;1491;1475;1467;1447;1198;883;839;806;798;776;776;783;783;779;773;773;773;772;772;769;769;769;770;774;774;774;777;779;777;781;778;780;780;780;782;783;785;784;786;786;787;787;786;786;788;788;778;776;775;776;777;783;777;779;777;775;775;773;766;766;766;761;761;761;760;760;763;764;764;764;764;763;763;763;763;765;772;774;780;786;787;787;794;794;797;809;832;852;868;868;860;855;847;847;872;872;842;842;886;2254;2262;2267;2262;2257;2253;2253;2279;2279;2281;2288;2292";
		Features fea1 = new Features(b);
		double[][] features=fea1.getAllFeatures();
		double[] lables =getLables(features[0].length,new int[]{13,16,19});
		
		
		svm_model model= fea1.getModel(cmd, features, lables);
		
		//Features fea2 = new Features(a);
		//features=fea2.getAllFeatures();
		
		svm_node[] pc = {new svm_node(),new svm_node()};
		pc[0].index = 1;
		pc[1].index = 2;
		for(int i=0;i<features[0].length;i++){
			pc[0].value=features[0][i];
			pc[1].value=features[1][i];
			System.out.println(i+1+":"+svm.svm_predict(model,pc));
		}
	}
}
